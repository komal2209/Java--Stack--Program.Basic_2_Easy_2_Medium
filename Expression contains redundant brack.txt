Expression contains redundant bracket or not

Given a string of balanced expression, find if it contains a redundant parenthesis or not. A set of parenthesis are redundant if the same sub-expression is surrounded by unnecessary or multiple brackets. Print Yes if redundant, else No.
Note: Expression may contain + , - , *, and / operators. Given expression is valid and there are no white spaces present.

Example 1:
Input:
exp = ((a+b))
Output:
Yes
Explanation:
((a+b)) can reduced to (a+b).

Example 2:
Input:
exp = (a+b+(c+d))
Output:
No
Explanation:
(a+b+(c+d)) doesn't have any redundant or multiple
brackets.
--------------------------------------------------------------------------------------------------------------------------------------
 Time Complexity: O(N)
 Auxiliary Space: O(N)

class Solution {
    public static int checkRedundancy(String s) {
        // code here
        Stack<Character> st=new Stack<Character>();
        
        for( int i=0;i<s.length();i++)
        {
            char ch=s.charAt(i);
            int flag=1;
            if(ch=='(' || ch== '*' || ch=='/' || ch=='-' || ch=='+')
            {
                st.push(ch);
            }
            else if(ch==')')
            {
                while(st.peek()!='(')
                {
                    char top=st.peek();
                    
                    if( top== '*' || top=='/' || top=='-' || top=='+')
                        flag=0;
                     st.pop();

                }
                
                if(flag==1)
                
                   return 1; 
                st.pop();
                
            }
        }
        
       return 0;
    }
}
        
