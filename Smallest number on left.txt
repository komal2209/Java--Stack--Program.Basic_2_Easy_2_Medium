Smallest number on left

Given an array a of integers of length n, find the nearest smaller number for every element such that the smaller element is on left side.If no small element present on the left print -1.

Example 1:
Input: n = 3
a = {1, 6, 2}
Output: -1 1 1
Explaination: There is no number at the 
left of 1. Smaller number than 6 and 2 is 1.

Example 2:
Input: n = 6
a = {1, 5, 0, 3, 4, 5}
Output: -1 1 -1 0 3 4
Explaination: Upto 3 it is easy to see 
the smaller numbers. But for 4 the smaller 
numbers are 1, 0 and 3. But among them 3 
is closest. Similary for 5 it is 4.

-------------------------------------------------------------using two for loop---------------------------------------------
 Time Complexity: O(n^2)
 Auxiliary Space: O(n)
class Solution{
    static List<Integer> leftSmaller(int n, int a[])
    {
        //code here
         List<Integer> al=new ArrayList<Integer>();
         for(int i=0;i<n;i++)
         {
             int j;
          for( j=i-1;j>=0;j--)
          {
              
              if(a[j]<a[i])
              {
                  al.add(a[j]);
                  break;
              }
              
          }
           
           if(j==-1)
           {
               al.add(-1);
           }
           
         }
         return al;
    }
}



-------------------------------------------------------------------------using stack-------------------------------------------------------------

Expected Time Complexity: O(n)
Expected Auxiliary Space: O(n)
class Solution{
    static List<Integer> leftSmaller(int n, int a[])
    {
        //code here
         List<Integer> al=new ArrayList<Integer>();
         Stack<Integer> st=new Stack<Integer>();
         for(int i=0;i<n;i++)
         {
             if(st.isEmpty())
             {
                 al.add(-1);
                 st.push(a[i]);
             }
             else if(!st.isEmpty() && st.peek()<a[i])
             {
                 al.add(st.peek());
                 st.push(a[i]);
             }
             else if(!st.isEmpty() && st.peek()>=a[i])
             {
                 while(!st.isEmpty() && st.peek()>=a[i])
                 {
                     st.pop();
                 }
                 if(st.isEmpty())
                 {
                     al.add(-1);
                     st.push(a[i]);
                 }
                 else{
                     al.add(st.peek());
                     st.push(a[i]);
                 }
             }
             
         }
         return al;
    }
}