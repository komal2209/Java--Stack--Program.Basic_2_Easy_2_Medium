Next Greater Element 2

Given a circular integer array arr of size N (i.e ., the next element of arr [N-1] is arr[0] ), return the next greater number for every element in arr.
The next greater element of a number x is the first greater number to its traversing order next in the array, which means you could search circularly to find its next greater number. If it doesn't exist, return -1 for this number.
 

Example 1:
Input:
N = 3
arr[ ] = {1, 2, 1}
Output: {2, -1, 2}
Explanation: The first 1's next greater number is 2:
The number 2 can't find next greater number.
The second 1's next greater number needs to search circularly, which is also 2.

Example 2:
Input:
N = 5
arr[ ] = {5, 4, 3, 2, 1}
Output: {-1, 5, 5, 5, 5}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Time Complexity: O(N)
 Auxiliary Space: O(N)

class Solution {
    static int[] nextGreaterElement(int N, int arr[]) {
        // code here
        ArrayList<Integer> al=new ArrayList<Integer>();
        Stack<Integer>st =new Stack<Integer>();
         for(int i=N-1;i>=0;i--)
           {
                while(!st.empty()&& st.peek()<=arr[i])
                {
                    st.pop();
                }
            st.push(arr[i]);
        }
        
        
        for(int i=N-1;i>=0;i--)
        {
            if(st.isEmpty())
            {
                al.add(-1);
            }
            else if(st.peek()>arr[i] && (!st.isEmpty()))
            {
                al.add(st.peek());

            }
            else if(st.peek()<=arr[i] && (!st.isEmpty()))
            {
                while(!st.isEmpty() && st.peek()<=arr[i])
                {
                    st.pop();
                }
                if(st.isEmpty())
                {
                    al.add(-1);
                }
                else
                {
                  al.add(st.peek());  

                }
            }
             st.push(arr[i]);
        }
        
        
        Collections.reverse(al);
        int[] ar=new int[N]; 
        for(int i=0;i<al.size();i++)
        {
            ar[i]=al.get(i);
        }
        return ar;
    }
}
